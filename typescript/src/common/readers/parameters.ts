import { z } from "zod";

export const listReadersParameters = z.object({
  merchantCode: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
});

export const createReaderParameters = z.object({
  pairing_code: z
    .string()
    .describe(
      `The pairing code is a 8 or 9 character alphanumeric string that is displayed on a SumUp Device after initiating the pairing. It is used to link the physical device to the created pairing.`,
    ),
  name: z
    .string()
    .describe(
      `Custom human-readable, user-defined name for easier identification of the reader.`,
    )
    .optional(),
  meta: z
    .object({})
    .describe(`A set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
**Warning**: Updating Meta will overwrite the existing data. Make sure to always include the complete JSON object.
`)
    .optional(),
  merchantCode: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
});

export const getReaderParameters = z.object({
  merchantCode: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
});

export const deleteReaderParameters = z.object({
  merchantCode: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
});

export const updateReaderParameters = z.object({
  name: z
    .string()
    .describe(
      `Custom human-readable, user-defined name for easier identification of the reader.`,
    )
    .optional(),
  meta: z
    .object({})
    .describe(`A set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
**Warning**: Updating Meta will overwrite the existing data. Make sure to always include the complete JSON object.
`)
    .optional(),
  merchantCode: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
});

export const createReaderCheckoutParameters = z
  .object({
    affiliate: z
      .object({
        app_id: z.string().describe(`Application ID of the affiliate.
It is a unique identifier for the application and should be set by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
`),
        foreign_transaction_id: z
          .string()
          .describe(`Foreign transaction ID of the affiliate.
It is a unique identifier for the transaction.
It can be used later to fetch the transaction details via the [Transactions API](https://developer.sumup.com/api/transactions/get).
`),
        key: z.string().describe(`Key of the affiliate.
It is a unique identifier for the key  and should be generated by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
`),
        tags: z
          .object({})
          .describe(`Additional metadata for the transaction.
It is key-value object that can be associated with the transaction.
`)
          .optional(),
      })
      .describe(`Affiliate metadata for the transaction.
It is a field that allow for integrators to track the source of the transaction.
`)
      .optional(),
    card_type: z
      .enum(["credit", "debit"])
      .describe(`The card type of the card used for the transaction.
Is is required only for some countries (e.g: Brazil).
`)
      .optional(),
    description: z
      .string()
      .describe(`Description of the checkout to be shown in the Merchant Sales`)
      .optional(),
    installments: z
      .number()
      .int()
      .describe(`Number of installments for the transaction.
It may vary according to the merchant country.
For example, in Brazil, the maximum number of installments is 12.
`)
      .optional(),
    return_url: z
      .string()
      .describe(`Webhook URL to which the payment result will be sent.
It must be a HTTPS url.
`)
      .optional(),
    tip_rates: z
      .array(z.number())
      .describe(`List of tipping rates to be displayed to the cardholder.
The rates are in percentage and should be between 0.01 and 0.99.
The list should be sorted in ascending order.
`)
      .optional(),
    tip_timeout: z
      .number()
      .int()
      .describe(`Time in seconds the cardholder has to select a tip rate.
If not provided, the default value is 30 seconds.

It can only be set if \`tip_rates\` is provided.

**Note**: If the target device is a Solo, it must be in version 3.3.38.0 or higher.
`)
      .optional(),
    total_amount: z
      .object({
        currency: z.string().describe(`Currency ISO 4217 code`),
        minor_unit: z
          .number()
          .int()
          .describe(`The minor units of the currency.
It represents the number of decimals of the currency. For the currencies CLP, COP and HUF, the minor unit is 0.
`),
        value: z.number().int().describe(`Integer value of the amount.`),
      })
      .describe(`Amount structure.

The amount is represented as an integer value altogether with the currency and the minor unit.

For example, EUR 1.00 is represented as value 100 with minor unit of 2.
`),
    merchantCode: z.string().describe(`Merchant Code`),
    readerId: z.string().describe(`The unique identifier of the Reader`),
  })
  .describe(`Reader Checkout`);

export const createReaderTerminateParameters = z.object({
  merchantCode: z.string().describe(`Merchant Code`),
  readerId: z.string().describe(`The unique identifier of the Reader`),
});
