import { z } from "zod";

export const createReaderCheckoutParameters = {
  description: z
    .string()
    .describe(`Description of the checkout to be shown in the Merchant Sales
`)
    .optional(),
  card_type: z
    .enum(["credit", "debit"])
    .describe(`The card type of the card used for the transaction.
Is is required only for some countries (e.g: Brazil).
`)
    .optional(),
  installments: z
    .number()
    .int()
    .describe(`Number of installments for the transaction.
It may vary according to the merchant country.
For example, in Brazil, the maximum number of installments is 12.
`)
    .optional(),
  return_url: z
    .string()
    .describe(`Webhook URL to which the payment result will be sent.
It must be a HTTPS url.
`)
    .optional(),
  total_amount: z
    .object({
      value: z
        .number()
        .int()
        .describe(`Total amount of the transaction.
It must be a positive integer.
`),
      currency: z.string().describe(`Currency ISO 4217 code`),
      minor_unit: z
        .number()
        .int()
        .describe(`The minor units of the currency. It represents the number of decimals of the currency.
For the currencies CLP, COP and HUF, the minor unit is 0.
`),
    })
    .describe(`Amount of the transaction.
The amount is represented as an integer value altogether with the currency and the minor unit.
For example, EUR 1.00 is represented as value 100 with minor unit of 2.
`),
  tip_rates: z
    .array(z.number())
    .describe(`List of tipping rates to be displayed to the cardholder.
The rates are in percentage and should be between 0.01 and 0.99.
The list should be sorted in ascending order.
`)
    .optional(),
  affiliate: z
    .object({
      app_id: z.string().describe(`Application ID of the affiliate.
It is a unique identifier for the application and should be set by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
`),
      key: z.string().describe(`Key of the affiliate.
It is a unique identifier for the key  and should be generated by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
`),
      foreign_transaction_id: z
        .string()
        .describe(`Foreign transaction ID of the affiliate.
It is a unique identifier for the transaction.
It can be used later to fetch the transaction details via the [Transactions API](https://developer.sumup.com/api/transactions/get).
`),
      tags: z
        .object({})
        .describe(`Additional metadata for the transaction.
It is key-value object that can be associated with the transaction.
`)
        .optional(),
    })
    .describe(`Affiliate metadata for the transaction.
It is an optional field that allow for integrators to track the source of the transaction.
`)
    .optional(),
  merchant_code: z.string(),
  id: z.string().describe(`The unique identifier of the reader.
`),
}.describe(`Reader Checkout`);

export const createReaderTerminateParameters = {
  merchant_code: z.string(),
  id: z.string().describe(`The unique identifier of the reader.
`),
};

export const listReadersParameters = {
  merchant_code: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
};

export const createReaderParameters = {
  pairing_code: z
    .string()
    .describe(
      `The pairing code is a 8 or 9 character alphanumeric string that is displayed on a SumUp Device after initiating the pairing. It is used to link the physical device to the created pairing.`,
    ),
  name: z
    .string()
    .describe(
      `Custom human-readable, user-defined name for easier identification of the reader.`,
    )
    .optional(),
  meta: z
    .object({})
    .describe(`Set of user-defined key-value pairs attached to the object.`)
    .optional(),
  merchant_code: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
};

export const getReaderParameters = {
  "If-Modified-Since": z
    .string()
    .describe(`Return the reader only if it has been modified after the specified timestamp given in the headers.

Timestamps are accepted in the following formats:

 - HTTP Standard: [IMF format (RFC 5322)](https://www.rfc-editor.org/rfc/rfc5322#section-3.3), sometimes also referred to as [RFC 7231](https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1).
 - RFC 3339: Used for timestamps in JSON payloads on this API.`)
    .optional(),
  merchant_code: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
};

export const deleteReaderParameters = {
  merchant_code: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
};

export const updateReaderParameters = {
  name: z
    .string()
    .describe(
      `Custom human-readable, user-defined name for easier identification of the reader.`,
    )
    .optional(),
  meta: z
    .object({})
    .describe(`Set of user-defined key-value pairs attached to the object.`)
    .optional(),
  merchant_code: z
    .string()
    .describe(`Unique identifier of the merchant account.`),
  id: z.string().describe(`The unique identifier of the reader.`),
};
